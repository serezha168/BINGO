import pygame
import random
import json
import os
from typing import List, Tuple
from tkinter import Tk, filedialog
import io
import cairosvg
from PIL import Image

# Константы
WINDOW_SIZE = (800, 750)
CELL_SIZE = 90
MARGIN = 20
BACKGROUND_COLOR = (35, 35, 35)
TEXT_COLOR = (255, 255, 255)
ACCENT_COLOR = (10, 132, 255)
SECONDARY_COLOR = (44, 44, 46)
INPUT_BOX_WIDTH = 300
INPUT_BOX_HEIGHT = 40
BUTTON_WIDTH = 120
BUTTON_HEIGHT = 40
FONT_SIZE = 16

def svg_to_pygame_surface(svg_code, width, height):
    png_data = cairosvg.svg2png(bytestring=svg_code, output_width=width, output_height=height)
    return pygame.image.load(io.BytesIO(png_data))

class BingoGame:
    def __init__(self):
        pygame.init()
        self.width, self.height = WINDOW_SIZE
        self.screen = pygame.display.set_mode(WINDOW_SIZE, pygame.RESIZABLE)
        pygame.display.set_caption("Bingo")
        self.clock = pygame.time.Clock()
        self.running = True

        self.available_sizes = [3, 4, 5, 6, 7]
        self.current_size_index = 2
        self.grid_size = self.available_sizes[self.current_size_index]
        self.cell_size = CELL_SIZE
        self.grid_offset = (MARGIN, MARGIN)

        self.input_rect = pygame.Rect(0, 0, INPUT_BOX_WIDTH, INPUT_BOX_HEIGHT)
        self.button_rect = pygame.Rect(0, 0, BUTTON_WIDTH, BUTTON_HEIGHT)
        self.size_button_rect = pygame.Rect(0, 0, BUTTON_WIDTH, BUTTON_HEIGHT)
        self.save_button_rect = pygame.Rect(0, 0, BUTTON_WIDTH, BUTTON_HEIGHT)
        self.load_button_rect = pygame.Rect(0, 0, BUTTON_WIDTH, BUTTON_HEIGHT)

        self.input_text = ''
        self.font = pygame.font.Font(None, FONT_SIZE)
        self.title_font = pygame.font.Font(None, 48)
        self.subtitle_font = pygame.font.Font(None, 20)

        self.board = self.generate_board()
        self.marked_cells = set()
        self.message = ""
        self.message_timer = 0
        self.input_active = False
        self.editing_cell = None
        self.selected_cell = None
        self.message_rect = pygame.Rect(0, 0, self.width, 30)

        self.adjust_scale()

        self.font_cache = {}
        pygame.font.init()
        FONT_PATH = "C:/Users/game4/Desktop/BINGO/font/helvetica_bold.otf"
        self.font = pygame.font.Font(FONT_PATH, FONT_SIZE)
        self.title_font = pygame.font.Font(FONT_PATH, 48)

        self.animations = []
        self.animation_speed = 5

        # SVG-элементы
        self.logo_svg = '''<svg width="59" height="13" viewBox="0 0 59 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.99268 12H0.422852V9.42188H1.83643V2.92529H0.620605V0.33252H6.5752C7.54199 0.33252 8.36719 0.410645 9.05078 0.566895C9.71973 0.728027 10.252 1.03564 10.6475 1.48975C11.043 1.93896 11.2407 2.57617 11.2407 3.40137C11.2407 3.98242 11.0723 4.48779 10.7354 4.91748C10.3984 5.34717 9.97119 5.65723 9.45361 5.84766C10.1323 6.14062 10.6328 6.51904 10.9551 6.98291C11.2822 7.44678 11.4458 8.08398 11.4458 8.89453C11.4458 9.88574 11.0576 10.6523 10.2812 11.1943C9.50977 11.7314 8.41357 12 6.99268 12ZM5.58643 2.92529V5.04199H5.98926C6.5459 5.04199 6.95605 4.96387 7.21973 4.80762C7.48828 4.65137 7.62256 4.3584 7.62256 3.92871C7.62256 3.63086 7.52979 3.38916 7.34424 3.20361C7.15869 3.01807 6.91699 2.92529 6.61914 2.92529H5.58643ZM5.58643 6.96094V9.42188H5.8501C6.44092 9.42188 6.89502 9.33887 7.2124 9.17285C7.53467 9.00684 7.6958 8.66504 7.6958 8.14746C7.6958 7.34668 7.20752 6.94629 6.23096 6.94629C6.12354 6.94629 6.01611 6.94873 5.90869 6.95361C5.80127 6.95361 5.69385 6.95605 5.58643 6.96094ZM19.3267 9.42188V12H13.2402V9.42188H14.4121V2.92529H13.2402V0.347168H19.3267V2.92529H18.1621V9.42188H19.3267ZM25.0835 9.37793V12H20.418V9.37793H21.6045V2.91064H20.4473V0.33252H25.8306L29.478 7.26123V2.92529H28.3062V0.347168H32.9717V2.92529H31.8145V12H27.376L23.9116 5.56201V9.37793H25.0835ZM40.3618 12.2124C39.1655 12.2124 38.0791 11.9902 37.1025 11.5459C36.1162 11.1064 35.3276 10.4229 34.7368 9.49512C34.146 8.56738 33.8506 7.39795 33.8506 5.98682C33.8506 4.86377 34.0825 3.85791 34.5464 2.96924C35.0103 2.08057 35.6841 1.38477 36.5679 0.881836C37.4565 0.374023 38.5015 0.120117 39.7026 0.120117C40.2104 0.120117 40.7036 0.205566 41.1821 0.376465C41.6655 0.547363 42.0464 0.796387 42.3247 1.12354L42.5664 0.347168H45.1006V4.64648H42.8374C42.686 4.03125 42.3955 3.56494 41.9658 3.24756C41.5361 2.93018 41.0869 2.77148 40.6182 2.77148C39.8369 2.77148 39.2192 3.05713 38.7651 3.62842C38.311 4.19971 38.084 4.98584 38.084 5.98682C38.084 6.99756 38.3086 7.79102 38.7578 8.36719C39.207 8.93848 39.8418 9.22412 40.6621 9.22412C40.8574 9.22412 41.0674 9.20459 41.292 9.16553C41.458 9.13623 41.6143 9.09717 41.7607 9.04834C41.9072 8.99463 42.0049 8.96289 42.0537 8.95312V7.92041H40.6475V5.74512H45.3423V10.9819C44.5903 11.3823 43.7847 11.6875 42.9253 11.8975C42.0659 12.1074 41.2114 12.2124 40.3618 12.2124ZM52.3296 12.2124C51.1138 12.2124 50.0615 11.9512 49.1729 11.4287C48.2891 10.9062 47.6152 10.1885 47.1514 9.27539C46.6924 8.3623 46.4629 7.31982 46.4629 6.14795C46.4629 4.93213 46.6924 3.87256 47.1514 2.96924C47.6104 2.06104 48.2793 1.36035 49.1582 0.867188C50.042 0.369141 51.0991 0.120117 52.3296 0.120117C53.5552 0.120117 54.6099 0.366699 55.4937 0.859863C56.3726 1.35791 57.0415 2.06104 57.5005 2.96924C57.9644 3.87744 58.1963 4.93701 58.1963 6.14795C58.1963 7.31982 57.9668 8.3623 57.5078 9.27539C57.0488 10.1885 56.375 10.9062 55.4863 11.4287C54.6025 11.9512 53.5503 12.2124 52.3296 12.2124ZM52.3296 9.6123C52.8569 9.6123 53.2598 9.29248 53.5381 8.65283C53.8213 8.01318 53.9629 7.15869 53.9629 6.08936C53.9629 5.04932 53.8262 4.22656 53.5527 3.62109C53.2842 3.01562 52.8765 2.71289 52.3296 2.71289C51.7778 2.71289 51.3677 3.01562 51.0991 3.62109C50.8306 4.22656 50.6963 5.04932 50.6963 6.08936C50.6963 7.15869 50.8354 8.01318 51.1138 8.65283C51.3921 9.29248 51.7974 9.6123 52.3296 9.6123Z" fill="#F9742A"/>
</svg>'''  # Вставьте сюда SVG-код логотипа
        self.save_button_svg = '''<svg width="90" height="30" viewBox="0 0 90 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="90" height="30" rx="11" fill="#6C2AF9"/>
<path d="M15.393 19.144C14.745 19.144 14.141 19.04 13.581 18.832C13.029 18.616 12.549 18.312 12.141 17.92C11.733 17.528 11.413 17.068 11.181 16.54C10.957 16.012 10.845 15.432 10.845 14.8C10.845 14.168 10.957 13.588 11.181 13.06C11.413 12.532 11.733 12.072 12.141 11.68C12.557 11.288 13.041 10.988 13.593 10.78C14.145 10.564 14.749 10.456 15.405 10.456C16.133 10.456 16.789 10.584 17.373 10.84C17.965 11.088 18.461 11.456 18.861 11.944L17.613 13.096C17.325 12.768 17.005 12.524 16.653 12.364C16.301 12.196 15.917 12.112 15.501 12.112C15.109 12.112 14.749 12.176 14.421 12.304C14.093 12.432 13.809 12.616 13.569 12.856C13.329 13.096 13.141 13.38 13.005 13.708C12.877 14.036 12.813 14.4 12.813 14.8C12.813 15.2 12.877 15.564 13.005 15.892C13.141 16.22 13.329 16.504 13.569 16.744C13.809 16.984 14.093 17.168 14.421 17.296C14.749 17.424 15.109 17.488 15.501 17.488C15.917 17.488 16.301 17.408 16.653 17.248C17.005 17.08 17.325 16.828 17.613 16.492L18.861 17.644C18.461 18.132 17.965 18.504 17.373 18.76C16.789 19.016 16.129 19.144 15.393 19.144ZM22.7853 19.096C22.0973 19.096 21.4853 18.952 20.9493 18.664C20.4213 18.376 20.0013 17.984 19.6893 17.488C19.3853 16.984 19.2333 16.412 19.2333 15.772C19.2333 15.124 19.3853 14.552 19.6893 14.056C20.0013 13.552 20.4213 13.16 20.9493 12.88C21.4853 12.592 22.0973 12.448 22.7853 12.448C23.4653 12.448 24.0733 12.592 24.6093 12.88C25.1453 13.16 25.5653 13.548 25.8693 14.044C26.1733 14.54 26.3253 15.116 26.3253 15.772C26.3253 16.412 26.1733 16.984 25.8693 17.488C25.5653 17.984 25.1453 18.376 24.6093 18.664C24.0733 18.952 23.4653 19.096 22.7853 19.096ZM22.7853 17.56C23.0973 17.56 23.3773 17.488 23.6253 17.344C23.8733 17.2 24.0693 16.996 24.2133 16.732C24.3573 16.46 24.4293 16.14 24.4293 15.772C24.4293 15.396 24.3573 15.076 24.2133 14.812C24.0693 14.548 23.8733 14.344 23.6253 14.2C23.3773 14.056 23.0973 13.984 22.7853 13.984C22.4733 13.984 22.1933 14.056 21.9453 14.2C21.6973 14.344 21.4973 14.548 21.3453 14.812C21.2013 15.076 21.1293 15.396 21.1293 15.772C21.1293 16.14 21.2013 16.46 21.3453 16.732C21.4973 16.996 21.6973 17.2 21.9453 17.344C22.1933 17.488 22.4733 17.56 22.7853 17.56ZM26.5497 19L29.4417 15.208L29.4057 16.24L26.6337 12.544H28.7337L30.4857 14.956L29.6937 14.98L31.5057 12.544H33.4977L30.7137 16.204V15.196L33.5937 19H31.4697L29.6337 16.432L30.4137 16.54L28.5897 19H26.5497ZM38.3192 19.096C37.7752 19.096 37.2992 18.976 36.8912 18.736C36.4832 18.496 36.1632 18.132 35.9312 17.644C35.7072 17.148 35.5952 16.524 35.5952 15.772C35.5952 15.012 35.7032 14.388 35.9192 13.9C36.1352 13.412 36.4472 13.048 36.8552 12.808C37.2632 12.568 37.7512 12.448 38.3192 12.448C38.9272 12.448 39.4712 12.588 39.9512 12.868C40.4392 13.14 40.8232 13.524 41.1032 14.02C41.3912 14.516 41.5352 15.1 41.5352 15.772C41.5352 16.452 41.3912 17.04 41.1032 17.536C40.8232 18.032 40.4392 18.416 39.9512 18.688C39.4712 18.96 38.9272 19.096 38.3192 19.096ZM34.5032 21.328V12.544H36.2912V13.864L36.2552 15.784L36.3752 17.692V21.328H34.5032ZM37.9952 17.56C38.3072 17.56 38.5832 17.488 38.8232 17.344C39.0712 17.2 39.2672 16.996 39.4112 16.732C39.5632 16.46 39.6392 16.14 39.6392 15.772C39.6392 15.396 39.5632 15.076 39.4112 14.812C39.2672 14.548 39.0712 14.344 38.8232 14.2C38.5832 14.056 38.3072 13.984 37.9952 13.984C37.6832 13.984 37.4032 14.056 37.1552 14.2C36.9072 14.344 36.7112 14.548 36.5672 14.812C36.4232 15.076 36.3512 15.396 36.3512 15.772C36.3512 16.14 36.4232 16.46 36.5672 16.732C36.7112 16.996 36.9072 17.2 37.1552 17.344C37.4032 17.488 37.6832 17.56 37.9952 17.56ZM46.6058 19V17.74L46.4858 17.464V15.208C46.4858 14.808 46.3618 14.496 46.1138 14.272C45.8738 14.048 45.5018 13.936 44.9978 13.936C44.6538 13.936 44.3138 13.992 43.9778 14.104C43.6498 14.208 43.3698 14.352 43.1378 14.536L42.4658 13.228C42.8178 12.98 43.2418 12.788 43.7378 12.652C44.2338 12.516 44.7378 12.448 45.2498 12.448C46.2338 12.448 46.9978 12.68 47.5418 13.144C48.0858 13.608 48.3578 14.332 48.3578 15.316V19H46.6058ZM44.6378 19.096C44.1338 19.096 43.7018 19.012 43.3418 18.844C42.9818 18.668 42.7058 18.432 42.5138 18.136C42.3218 17.84 42.2258 17.508 42.2258 17.14C42.2258 16.756 42.3178 16.42 42.5018 16.132C42.6938 15.844 42.9938 15.62 43.4018 15.46C43.8098 15.292 44.3418 15.208 44.9978 15.208H46.7138V16.3H45.2018C44.7618 16.3 44.4578 16.372 44.2898 16.516C44.1298 16.66 44.0498 16.84 44.0498 17.056C44.0498 17.296 44.1418 17.488 44.3258 17.632C44.5178 17.768 44.7778 17.836 45.1058 17.836C45.4178 17.836 45.6978 17.764 45.9458 17.62C46.1938 17.468 46.3738 17.248 46.4858 16.96L46.7738 17.824C46.6378 18.24 46.3898 18.556 46.0298 18.772C45.6698 18.988 45.2058 19.096 44.6378 19.096ZM49.984 19V12.544H51.844V15.064H54.652V12.544H56.524V19H54.652V16.588H51.844V19H49.984ZM58.316 19V12.544H60.176V16.384L63.32 12.544H65.036V19H63.176V15.16L60.044 19H58.316ZM68.2155 19V13.648L68.6355 14.08H66.0315V12.544H72.2595V14.08H69.6555L70.0755 13.648V19H68.2155ZM76.7494 14.608C77.5974 14.616 78.2414 14.808 78.6814 15.184C79.1294 15.552 79.3534 16.076 79.3534 16.756C79.3534 17.468 79.1014 18.024 78.5974 18.424C78.0934 18.816 77.3934 19.012 76.4974 19.012L73.2574 19V12.544H75.1174V14.608H76.7494ZM76.3294 17.68C76.6894 17.688 76.9654 17.612 77.1574 17.452C77.3494 17.292 77.4454 17.052 77.4454 16.732C77.4454 16.412 77.3494 16.184 77.1574 16.048C76.9654 15.904 76.6894 15.828 76.3294 15.82L75.1174 15.808V17.68H76.3294Z" fill="white"/>
</svg>'''  # Вставьте сюда SVG-код кнопки "Сохранить"
        self.load_button_svg = '''<svg width="90" height="30" viewBox="0 0 90 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="90" height="30" rx="11" fill="#6C2AF9"/>
<path d="M14.1579 14.62C14.6459 14.788 15.0259 15.052 15.2979 15.412C15.5779 15.764 15.7179 16.176 15.7179 16.648C15.7179 17.16 15.5499 17.604 15.2139 17.98C14.8779 18.356 14.4219 18.644 13.8459 18.844C13.2779 19.044 12.6539 19.144 11.9739 19.144C11.3979 19.144 10.8219 19.072 10.2459 18.928C9.67789 18.784 9.13789 18.564 8.62589 18.268L9.22589 16.876C9.59389 17.1 9.99789 17.272 10.4379 17.392C10.8859 17.504 11.3219 17.56 11.7459 17.56C12.3219 17.56 12.7979 17.456 13.1739 17.248C13.5579 17.04 13.7499 16.748 13.7499 16.372C13.7499 16.06 13.6179 15.824 13.3539 15.664C13.0979 15.504 12.7459 15.424 12.2979 15.424H10.2459V13.96H12.1539C12.5459 13.96 12.8499 13.88 13.0659 13.72C13.2899 13.56 13.4019 13.34 13.4019 13.06C13.4019 12.732 13.2419 12.476 12.9219 12.292C12.6099 12.108 12.2059 12.016 11.7099 12.016C11.3419 12.016 10.9619 12.068 10.5699 12.172C10.1779 12.268 9.80589 12.416 9.45389 12.616L8.86589 11.104C9.75389 10.648 10.7139 10.42 11.7459 10.42C12.4019 10.42 13.0059 10.516 13.5579 10.708C14.1099 10.9 14.5499 11.18 14.8779 11.548C15.2059 11.916 15.3699 12.344 15.3699 12.832C15.3699 13.232 15.2619 13.588 15.0459 13.9C14.8299 14.212 14.5339 14.452 14.1579 14.62ZM23.6289 12.544V19H21.8409V18.256C21.3769 18.816 20.7049 19.096 19.8249 19.096C19.2169 19.096 18.6649 18.96 18.1689 18.688C17.6809 18.416 17.2969 18.028 17.0169 17.524C16.7369 17.02 16.5969 16.436 16.5969 15.772C16.5969 15.108 16.7369 14.524 17.0169 14.02C17.2969 13.516 17.6809 13.128 18.1689 12.856C18.6649 12.584 19.2169 12.448 19.8249 12.448C20.6489 12.448 21.2929 12.708 21.7569 13.228V12.544H23.6289ZM20.1489 17.56C20.6209 17.56 21.0129 17.4 21.3249 17.08C21.6369 16.752 21.7929 16.316 21.7929 15.772C21.7929 15.228 21.6369 14.796 21.3249 14.476C21.0129 14.148 20.6209 13.984 20.1489 13.984C19.6689 13.984 19.2729 14.148 18.9609 14.476C18.6489 14.796 18.4929 15.228 18.4929 15.772C18.4929 16.316 18.6489 16.752 18.9609 17.08C19.2729 17.4 19.6689 17.56 20.1489 17.56ZM30.57 14.08H27.258V19H25.398V12.544H30.57V14.08ZM34.8741 12.448C35.5621 12.448 36.1621 12.584 36.6741 12.856C37.1861 13.128 37.5821 13.516 37.8621 14.02C38.1421 14.524 38.2821 15.112 38.2821 15.784C38.2821 16.44 38.1501 17.02 37.8861 17.524C37.6221 18.02 37.2501 18.408 36.7701 18.688C36.2901 18.96 35.7381 19.096 35.1141 19.096C34.2901 19.096 33.6461 18.836 33.1821 18.316V21.328H31.3101V15.796C31.3101 15.132 31.4581 14.548 31.7541 14.044C32.0501 13.54 32.4661 13.148 33.0021 12.868C33.5381 12.588 34.1621 12.448 34.8741 12.448ZM34.7901 17.56C35.2781 17.56 35.6741 17.396 35.9781 17.068C36.2821 16.74 36.4341 16.312 36.4341 15.784C36.4341 15.248 36.2821 14.816 35.9781 14.488C35.6741 14.152 35.2781 13.984 34.7901 13.984C34.3021 13.984 33.9061 14.148 33.6021 14.476C33.3061 14.804 33.1581 15.236 33.1581 15.772C33.1581 16.308 33.3061 16.74 33.6021 17.068C33.8981 17.396 34.2941 17.56 34.7901 17.56ZM46.0692 12.544V17.92C46.0692 19.104 45.7692 19.984 45.1692 20.56C44.5692 21.136 43.6972 21.424 42.5532 21.424C41.9452 21.424 41.3692 21.348 40.8252 21.196C40.2892 21.044 39.8372 20.824 39.4692 20.536L40.2132 19.192C40.4852 19.416 40.8172 19.592 41.2092 19.72C41.6012 19.848 41.9972 19.912 42.3972 19.912C43.0212 19.912 43.4772 19.768 43.7652 19.48C44.0532 19.192 44.1972 18.752 44.1972 18.16V17.944C43.9572 18.184 43.6732 18.368 43.3452 18.496C43.0172 18.624 42.6652 18.688 42.2892 18.688C41.4412 18.688 40.7692 18.448 40.2732 17.968C39.7772 17.48 39.5292 16.752 39.5292 15.784V12.544H41.4012V15.508C41.4012 16.556 41.8372 17.08 42.7092 17.08C43.1572 17.08 43.5172 16.936 43.7892 16.648C44.0612 16.352 44.1972 15.916 44.1972 15.34V12.544H46.0692ZM51.9689 15.64C52.3529 15.76 52.6489 15.944 52.8569 16.192C53.0729 16.44 53.1809 16.736 53.1809 17.08C53.1809 17.488 53.0409 17.848 52.7609 18.16C52.4809 18.464 52.0969 18.7 51.6089 18.868C51.1209 19.036 50.5689 19.12 49.9529 19.12C49.4489 19.12 48.9529 19.068 48.4649 18.964C47.9769 18.86 47.5249 18.704 47.1089 18.496L47.6129 17.188C48.2929 17.516 49.0449 17.68 49.8689 17.68C50.3089 17.68 50.6529 17.616 50.9009 17.488C51.1569 17.352 51.2849 17.164 51.2849 16.924C51.2849 16.716 51.1969 16.56 51.0209 16.456C50.8449 16.344 50.5889 16.288 50.2529 16.288H48.9329V15.124H50.0849C50.4129 15.124 50.6649 15.072 50.8409 14.968C51.0169 14.864 51.1049 14.712 51.1049 14.512C51.1049 14.304 50.9929 14.144 50.7689 14.032C50.5529 13.92 50.2409 13.864 49.8329 13.864C49.2089 13.864 48.5289 14.012 47.7929 14.308L47.3369 13.012C48.2329 12.62 49.1049 12.424 49.9529 12.424C50.5369 12.424 51.0569 12.496 51.5129 12.64C51.9769 12.784 52.3409 12.996 52.6049 13.276C52.8689 13.548 53.0009 13.868 53.0009 14.236C53.0009 14.54 52.9089 14.816 52.7249 15.064C52.5409 15.304 52.2889 15.496 51.9689 15.64ZM60.9146 12.544V19H59.1266V18.244C58.8866 18.524 58.5906 18.736 58.2386 18.88C57.8946 19.024 57.5266 19.096 57.1346 19.096C56.2866 19.096 55.6106 18.852 55.1066 18.364C54.6106 17.876 54.3626 17.152 54.3626 16.192V12.544H56.2346V15.916C56.2346 16.956 56.6706 17.476 57.5426 17.476C57.9986 17.476 58.3626 17.332 58.6346 17.044C58.9066 16.748 59.0426 16.312 59.0426 15.736V12.544H60.9146ZM70.9548 12.448C71.7628 12.448 72.4028 12.688 72.8748 13.168C73.3548 13.64 73.5948 14.352 73.5948 15.304V19H71.7228V15.592C71.7228 15.08 71.6148 14.7 71.3988 14.452C71.1908 14.196 70.8908 14.068 70.4988 14.068C70.0588 14.068 69.7108 14.212 69.4548 14.5C69.1988 14.78 69.0708 15.2 69.0708 15.76V19H67.1988V15.592C67.1988 14.576 66.7908 14.068 65.9748 14.068C65.5428 14.068 65.1988 14.212 64.9428 14.5C64.6868 14.78 64.5588 15.2 64.5588 15.76V19H62.6868V12.544H64.4748V13.288C64.7148 13.016 65.0068 12.808 65.3508 12.664C65.7028 12.52 66.0868 12.448 66.5028 12.448C66.9588 12.448 67.3708 12.54 67.7388 12.724C68.1068 12.9 68.4028 13.16 68.6268 13.504C68.8908 13.168 69.2228 12.908 69.6228 12.724C70.0308 12.54 70.4748 12.448 70.9548 12.448ZM78.1902 19.18C77.1662 19.18 76.3902 18.952 75.8622 18.496C75.3422 18.04 75.0822 17.368 75.0822 16.48V12.544H76.9422V14.728C77.1422 14.584 77.3982 14.472 77.7102 14.392C78.0302 14.312 78.3862 14.272 78.7782 14.272C79.5862 14.272 80.2182 14.472 80.6742 14.872C81.1302 15.272 81.3582 15.856 81.3582 16.624C81.3582 17.448 81.0742 18.08 80.5062 18.52C79.9462 18.96 79.1742 19.18 78.1902 19.18ZM78.1902 17.86C78.5902 17.86 78.8982 17.752 79.1142 17.536C79.3382 17.32 79.4502 17.028 79.4502 16.66C79.4502 16.308 79.3422 16.032 79.1262 15.832C78.9182 15.632 78.6182 15.532 78.2262 15.532C77.9382 15.532 77.6822 15.584 77.4582 15.688C77.2342 15.792 77.0622 15.94 76.9422 16.132V16.66C76.9422 17.036 77.0502 17.332 77.2662 17.548C77.4902 17.756 77.7982 17.86 78.1902 17.86Z" fill="white"/>
</svg>'''  # Вставьте сюда SVG-код кнопки "Загрузить"
        self.size_buttons_svg = {
            3: '''<svg width="90" height="30" viewBox="0 0 90 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="90" height="30" rx="11" fill="#6C2AF9"/>
<path d="M37.6217 19.144C37.0377 19.144 36.4577 19.068 35.8817 18.916C35.3057 18.756 34.8177 18.532 34.4177 18.244L35.1737 16.756C35.4937 16.988 35.8657 17.172 36.2897 17.308C36.7137 17.444 37.1417 17.512 37.5737 17.512C38.0617 17.512 38.4457 17.416 38.7257 17.224C39.0057 17.032 39.1457 16.768 39.1457 16.432C39.1457 16.112 39.0217 15.86 38.7737 15.676C38.5257 15.492 38.1257 15.4 37.5737 15.4H36.6857V14.116L39.0257 11.464L39.2417 12.16H34.8377V10.6H40.7177V11.86L38.3897 14.512L37.4057 13.948H37.9697C39.0017 13.948 39.7817 14.18 40.3097 14.644C40.8377 15.108 41.1017 15.704 41.1017 16.432C41.1017 16.904 40.9777 17.348 40.7297 17.764C40.4817 18.172 40.1017 18.504 39.5897 18.76C39.0777 19.016 38.4217 19.144 37.6217 19.144ZM41.38 19L44.272 15.208L44.236 16.24L41.464 12.544H43.564L45.316 14.956L44.524 14.98L46.336 12.544H48.328L45.544 16.204V15.196L48.424 19H46.3L44.464 16.432L45.244 16.54L43.42 19H41.38ZM51.6608 19.144C51.0768 19.144 50.4968 19.068 49.9208 18.916C49.3448 18.756 48.8568 18.532 48.4567 18.244L49.2128 16.756C49.5328 16.988 49.9048 17.172 50.3288 17.308C50.7528 17.444 51.1808 17.512 51.6128 17.512C52.1008 17.512 52.4848 17.416 52.7648 17.224C53.0448 17.032 53.1848 16.768 53.1848 16.432C53.1848 16.112 53.0608 15.86 52.8128 15.676C52.5648 15.492 52.1648 15.4 51.6128 15.4H50.7248V14.116L53.0648 11.464L53.2808 12.16H48.8768V10.6H54.7568V11.86L52.4288 14.512L51.4448 13.948H52.0088C53.0408 13.948 53.8208 14.18 54.3488 14.644C54.8768 15.108 55.1408 15.704 55.1408 16.432C55.1408 16.904 55.0168 17.348 54.7688 17.764C54.5208 18.172 54.1408 18.504 53.6288 18.76C53.1168 19.016 52.4608 19.144 51.6608 19.144Z" fill="white"/>
</svg>''',  # SVG для кнопки 3x3
            4: '''<svg width="90" height="30" viewBox="0 0 90 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="90" height="30" rx="11" fill="#6C2AF9"/>
<path d="M33.8525 17.236V15.928L37.8125 10.6H39.8525L35.9765 15.928L35.0285 15.652H41.6405V17.236H33.8525ZM38.3765 19V17.236L38.4365 15.652V14.08H40.2725V19H38.3765ZM41.6027 19L44.4947 15.208L44.4587 16.24L41.6867 12.544H43.7867L45.5387 14.956L44.7467 14.98L46.5587 12.544H48.5507L45.7667 16.204V15.196L48.6467 19H46.5227L44.6867 16.432L45.4667 16.54L43.6427 19H41.6027ZM48.6181 17.236V15.928L52.5781 10.6H54.6181L50.7421 15.928L49.7941 15.652H56.4061V17.236H48.6181ZM53.1421 19V17.236L53.2021 15.652V14.08H55.0381V19H53.1421Z" fill="white"/>
</svg>''',  # SVG для кнопки 4x4
            5: '''<svg width="90" height="30" viewBox="0 0 90 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="90" height="30" rx="11" fill="#6C2AF9"/>
<path d="M37.7068 19.144C37.1228 19.144 36.5428 19.068 35.9668 18.916C35.3988 18.756 34.9108 18.532 34.5028 18.244L35.2708 16.756C35.5908 16.988 35.9588 17.172 36.3748 17.308C36.7988 17.444 37.2268 17.512 37.6588 17.512C38.1468 17.512 38.5308 17.416 38.8108 17.224C39.0908 17.032 39.2308 16.764 39.2308 16.42C39.2308 16.204 39.1748 16.012 39.0628 15.844C38.9508 15.676 38.7508 15.548 38.4628 15.46C38.1828 15.372 37.7868 15.328 37.2748 15.328H35.1268L35.5588 10.6H40.6828V12.16H36.2548L37.2628 11.272L36.9628 14.644L35.9548 13.756H37.7308C38.5628 13.756 39.2308 13.872 39.7348 14.104C40.2468 14.328 40.6188 14.636 40.8508 15.028C41.0828 15.42 41.1988 15.864 41.1988 16.36C41.1988 16.856 41.0748 17.316 40.8268 17.74C40.5788 18.156 40.1948 18.496 39.6748 18.76C39.1628 19.016 38.5068 19.144 37.7068 19.144ZM41.4149 19L44.3069 15.208L44.2709 16.24L41.4989 12.544H43.5989L45.3509 14.956L44.5589 14.98L46.3709 12.544H48.3629L45.5789 16.204V15.196L48.4589 19H46.3349L44.4989 16.432L45.2789 16.54L43.4549 19H41.4149ZM51.8045 19.144C51.2205 19.144 50.6405 19.068 50.0645 18.916C49.4965 18.756 49.0085 18.532 48.6005 18.244L49.3685 16.756C49.6885 16.988 50.0565 17.172 50.4725 17.308C50.8965 17.444 51.3245 17.512 51.7565 17.512C52.2445 17.512 52.6285 17.416 52.9085 17.224C53.1885 17.032 53.3285 16.764 53.3285 16.42C53.3285 16.204 53.2725 16.012 53.1605 15.844C53.0485 15.676 52.8485 15.548 52.5605 15.46C52.2805 15.372 51.8845 15.328 51.3725 15.328H49.2245L49.6565 10.6H54.7805V12.16H50.3525L51.3605 11.272L51.0605 14.644L50.0525 13.756H51.8285C52.6605 13.756 53.3285 13.872 53.8325 14.104C54.3445 14.328 54.7165 14.636 54.9485 15.028C55.1805 15.42 55.2965 15.864 55.2965 16.36C55.2965 16.856 55.1725 17.316 54.9245 17.74C54.6765 18.156 54.2925 18.496 53.7725 18.76C53.2605 19.016 52.6045 19.144 51.8045 19.144Z" fill="white"/>
</svg>''',  # SVG для кнопки 5x5
            6: '''<svg width="90" height="30" viewBox="0 0 90 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="90" height="30" rx="11" fill="#6C2AF9"/>
<path d="M38.6791 19.144C37.9111 19.144 37.2431 18.984 36.6751 18.664C36.1151 18.344 35.6831 17.876 35.3791 17.26C35.0751 16.644 34.9231 15.884 34.9231 14.98C34.9231 14.012 35.1031 13.192 35.4631 12.52C35.8311 11.848 36.3351 11.336 36.9751 10.984C37.6231 10.632 38.3671 10.456 39.2071 10.456C39.6551 10.456 40.0831 10.504 40.4911 10.6C40.8991 10.696 41.2511 10.84 41.5471 11.032L40.8271 12.46C40.5951 12.3 40.3471 12.192 40.0831 12.136C39.8191 12.072 39.5431 12.04 39.2551 12.04C38.5271 12.04 37.9511 12.26 37.5271 12.7C37.1031 13.14 36.8911 13.792 36.8911 14.656C36.8911 14.8 36.8911 14.96 36.8911 15.136C36.8991 15.312 36.9231 15.488 36.9631 15.664L36.4231 15.16C36.5751 14.848 36.7711 14.588 37.0111 14.38C37.2511 14.164 37.5351 14.004 37.8631 13.9C38.1991 13.788 38.5671 13.732 38.9671 13.732C39.5111 13.732 39.9991 13.84 40.4311 14.056C40.8631 14.272 41.2071 14.576 41.4631 14.968C41.7271 15.36 41.8591 15.82 41.8591 16.348C41.8591 16.916 41.7151 17.412 41.4271 17.836C41.1471 18.252 40.7671 18.576 40.2871 18.808C39.8151 19.032 39.2791 19.144 38.6791 19.144ZM38.5711 17.692C38.8431 17.692 39.0831 17.644 39.2911 17.548C39.5071 17.444 39.6751 17.296 39.7951 17.104C39.9151 16.912 39.9751 16.692 39.9751 16.444C39.9751 16.06 39.8431 15.756 39.5791 15.532C39.3231 15.3 38.9791 15.184 38.5471 15.184C38.2591 15.184 38.0071 15.24 37.7911 15.352C37.5751 15.456 37.4031 15.604 37.2751 15.796C37.1551 15.98 37.0951 16.196 37.0951 16.444C37.0951 16.684 37.1551 16.9 37.2751 17.092C37.3951 17.276 37.5631 17.424 37.7791 17.536C37.9951 17.64 38.2591 17.692 38.5711 17.692ZM41.9559 19L44.8479 15.208L44.8119 16.24L42.0399 12.544H44.1399L45.8919 14.956L45.0999 14.98L46.9119 12.544H48.9039L46.1199 16.204V15.196L48.9999 19H46.8759L45.0399 16.432L45.8199 16.54L43.9959 19H41.9559ZM53.1283 19.144C52.3603 19.144 51.6923 18.984 51.1243 18.664C50.5643 18.344 50.1323 17.876 49.8283 17.26C49.5243 16.644 49.3723 15.884 49.3723 14.98C49.3723 14.012 49.5523 13.192 49.9123 12.52C50.2803 11.848 50.7843 11.336 51.4243 10.984C52.0723 10.632 52.8163 10.456 53.6563 10.456C54.1043 10.456 54.5323 10.504 54.9403 10.6C55.3483 10.696 55.7003 10.84 55.9963 11.032L55.2763 12.46C55.0443 12.3 54.7963 12.192 54.5323 12.136C54.2683 12.072 53.9923 12.04 53.7043 12.04C52.9763 12.04 52.4003 12.26 51.9763 12.7C51.5523 13.14 51.3403 13.792 51.3403 14.656C51.3403 14.8 51.3403 14.96 51.3403 15.136C51.3483 15.312 51.3723 15.488 51.4123 15.664L50.8723 15.16C51.0243 14.848 51.2203 14.588 51.4603 14.38C51.7003 14.164 51.9843 14.004 52.3123 13.9C52.6483 13.788 53.0163 13.732 53.4163 13.732C53.9603 13.732 54.4483 13.84 54.8803 14.056C55.3123 14.272 55.6563 14.576 55.9123 14.968C56.1763 15.36 56.3083 15.82 56.3083 16.348C56.3083 16.916 56.1643 17.412 55.8763 17.836C55.5963 18.252 55.2163 18.576 54.7363 18.808C54.2643 19.032 53.7283 19.144 53.1283 19.144ZM53.0203 17.692C53.2923 17.692 53.5323 17.644 53.7403 17.548C53.9563 17.444 54.1243 17.296 54.2443 17.104C54.3643 16.912 54.4243 16.692 54.4243 16.444C54.4243 16.06 54.2923 15.756 54.0283 15.532C53.7723 15.3 53.4283 15.184 52.9963 15.184C52.7083 15.184 52.4563 15.24 52.2403 15.352C52.0243 15.456 51.8523 15.604 51.7243 15.796C51.6043 15.98 51.5443 16.196 51.5443 16.444C51.5443 16.684 51.6043 16.9 51.7243 17.092C51.8443 17.276 52.0123 17.424 52.2283 17.536C52.4443 17.64 52.7083 17.692 53.0203 17.692Z" fill="white"/>
</svg>''',  # SVG для кнопки 6x6
            7: '''<svg width="90" height="30" viewBox="0 0 90 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="90" height="30" rx="11" fill="#6C2AF9"/>
<path d="M35.8843 19L39.2683 11.344L39.7723 12.184H35.2483L36.1123 11.272V13.552H34.3843V10.6H41.1163V11.86L37.9963 19H35.8843ZM41.4328 19L44.3248 15.208L44.2888 16.24L41.5168 12.544H43.6168L45.3688 14.956L44.5768 14.98L46.3888 12.544H48.3808L45.5968 16.204V15.196L48.4768 19H46.3528L44.5168 16.432L45.2968 16.54L43.4728 19H41.4328ZM50.2983 19L53.6823 11.344L54.1863 12.184H49.6623L50.5263 11.272V13.552H48.7983V10.6H55.5303V11.86L52.4103 19H50.2983Z" fill="white"/>
</svg>''',  # SVG для кнопки 7x7
        }

        self.size_buttons_surfaces = {
            size: svg_to_pygame_surface(svg, BUTTON_WIDTH, BUTTON_HEIGHT)
            for size, svg in self.size_buttons_svg.items()
        }

        self.current_size_button_surface = self.size_buttons_surfaces[self.grid_size]
        
        self.logo_surface = svg_to_pygame_surface(self.logo_svg, 120, 75)  # Измените размеры по необходимости
        self.save_button_surface = svg_to_pygame_surface(self.save_button_svg, BUTTON_WIDTH, BUTTON_HEIGHT)
        self.load_button_surface = svg_to_pygame_surface(self.load_button_svg, BUTTON_WIDTH, BUTTON_HEIGHT)

    def generate_board(self) -> List[List[str]]:
        return [['' for _ in range(self.grid_size)] for _ in range(self.grid_size)]

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == pygame.VIDEORESIZE:
                self.width, self.height = event.size
                self.screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
                self.adjust_scale()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    if self.input_rect.collidepoint(event.pos):
                        self.input_active = True
                    elif self.button_rect.collidepoint(event.pos):
                        self.add_word()
                    elif self.size_button_rect.collidepoint(event.pos):
                        self.change_grid_size()
                    elif self.save_button_rect.collidepoint(event.pos):
                        self.save_preset()
                    elif self.load_button_rect.collidepoint(event.pos):
                        self.load_preset()
                    else:
                        self.input_active = False
                        self.toggle_cell(event.pos)
                elif event.button == 3:
                    self.edit_word(event.pos)
            elif event.type == pygame.KEYDOWN:
                if self.input_active:
                    if event.key == pygame.K_RETURN:
                        self.add_word()
                    elif event.key == pygame.K_BACKSPACE:
                        self.input_text = self.input_text[:-1]
                    else:
                        self.input_text += event.unicode

    def toggle_cell(self, pos):
        x, y = pos
        grid_x = (x - self.grid_offset[0]) // self.cell_size
        grid_y = (y - self.grid_offset[1]) // self.cell_size
        if 0 <= grid_x < self.grid_size and 0 <= grid_y < self.grid_size:
            cell = (grid_x, grid_y)
            if cell in self.marked_cells:
                self.marked_cells.remove(cell)
            else:
                self.marked_cells.add(cell)
                # Добавляем анимацию при отметке клетки
                start_pos = (x, y)
                end_pos = (self.grid_offset[0] + grid_x * self.cell_size + self.cell_size // 2,
                           self.grid_offset[1] + grid_y * self.cell_size + self.cell_size // 2)
                self.add_animation(start_pos, end_pos, 20)

    def edit_word(self, pos):
        x, y = pos
        grid_x = (x - self.grid_offset[0]) // self.cell_size
        grid_y = (y - self.grid_offset[1]) // self.cell_size
        if 0 <= grid_x < self.grid_size and 0 <= grid_y < self.grid_size:
            self.input_text = self.board[grid_y][grid_x]
            self.editing_cell = (grid_x, grid_y)
            self.selected_cell = (grid_x, grid_y)
            self.input_active = True

    def add_word(self):
        if self.editing_cell is not None:
            x, y = self.editing_cell
            self.board[y][x] = self.input_text
            self.editing_cell = None
            self.message = f"Слово '{self.input_text}' успешно изменено!"
        else:
            self.message = "Выберите клетку для редактирования!"
        self.message_timer = 120
        self.input_text = ''
        self.selected_cell = None

    def update(self):
        if self.message_timer > 0:
            self.message_timer -= 1
        else:
            self.message = ""
        
        # Обновление анимаций
        for anim in self.animations[:]:
            anim['progress'] += self.animation_speed
            if anim['progress'] >= anim['duration']:
                self.animations.remove(anim)

    def adjust_scale(self):
        max_cell_size = min((self.width - 2 * MARGIN) // self.grid_size,
                            (self.height - 2 * MARGIN - INPUT_BOX_HEIGHT - 200) // self.grid_size)
        self.cell_size = max_cell_size
        self.grid_offset = (
            (self.width - self.grid_size * self.cell_size) // 2,
            max(120, (self.height - self.grid_size * self.cell_size - INPUT_BOX_HEIGHT - 200) // 2)
        )
        input_y = self.grid_offset[1] + self.grid_size * self.cell_size + 30
        total_width = INPUT_BOX_WIDTH + BUTTON_WIDTH + 20
        start_x = (self.width - total_width) // 2
        self.input_rect.topleft = (start_x, input_y)
        self.button_rect.topleft = (start_x + INPUT_BOX_WIDTH + 20, input_y)
        buttons_total_width = BUTTON_WIDTH * 3 + 20
        buttons_start_x = (self.width - buttons_total_width) // 2
        buttons_y = self.grid_offset[1] - 60
        self.save_button_rect.topleft = (buttons_start_x, buttons_y)
        self.size_button_rect.topleft = (buttons_start_x + BUTTON_WIDTH + 10, buttons_y)
        self.load_button_rect.topleft = (buttons_start_x + BUTTON_WIDTH * 2 + 20, buttons_y)
        self.message_rect.topleft = (0, self.button_rect.bottom + 20)
        self.message_rect.width = self.width

    def change_grid_size(self):
        self.current_size_index = (self.current_size_index + 1) % len(self.available_sizes)
        self.grid_size = self.available_sizes[self.current_size_index]
        self.board = self.generate_board()
        self.marked_cells = set()
        self.adjust_scale()
        self.current_size_button_surface = self.size_buttons_surfaces[self.grid_size]

    def save_preset(self):
        root = Tk()
        root.withdraw()
        file_path = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            initialfile=f"preset_{self.grid_size}x{self.grid_size}.json"
        )
        if file_path:
            preset = {
                "grid_size": self.grid_size,
                "board": self.board,
                "marked_cells": list(self.marked_cells)
            }
            with open(file_path, "w") as f:
                json.dump(preset, f)
            self.message = f"Пресет сохранен как {os.path.basename(file_path)}"
        else:
            self.message = "Сохранение отменено"
        self.message_timer = 120

    def load_preset(self):
        root = Tk()
        root.withdraw()
        file_path = filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, "r") as f:
                    preset = json.load(f)
                self.grid_size = preset["grid_size"]
                self.board = preset["board"]
                self.marked_cells = set(map(tuple, preset["marked_cells"]))
                self.adjust_scale()
                self.message = f"Пресет {os.path.basename(file_path)} загружен"
            except Exception as e:
                self.message = f"Ошибка при загрузке пресета: {str(e)}"
        else:
            self.message = "Загрузка отменена"
        self.message_timer = 120

    def wrap_text(self, text, font_size, max_width):
        if font_size not in self.font_cache:
            self.font_cache[font_size] = pygame.font.Font(None, font_size)
        font = self.font_cache[font_size]
        words = text.split()
        lines = []
        current_line = []
        for word in words:
            test_line = ' '.join(current_line + [word])
            test_width = font.size(test_line)[0]
            if test_width <= max_width:
                current_line.append(word)
            else:
                lines.append(' '.join(current_line))
                current_line = [word]
        lines.append(' '.join(current_line))
        return lines

    def draw(self):
            self.screen.fill(BACKGROUND_COLOR)

            # Отрисовка логотипа
            logo_rect = self.logo_surface.get_rect(center=(self.width // 2, self.grid_offset[1] - 90))
            self.screen.blit(self.logo_surface, logo_rect)

            # Отрисовка кнопок
            self.screen.blit(self.save_button_surface, self.save_button_rect)
            self.screen.blit(self.load_button_surface, self.load_button_rect)
            self.screen.blit(self.current_size_button_surface, self.size_button_rect)

            for i in range(self.grid_size):
                for j in range(self.grid_size):
                    x = self.grid_offset[0] + i * self.cell_size
                    y = self.grid_offset[1] + j * self.cell_size
                    rect = pygame.Rect(x, y, self.cell_size, self.cell_size)
                    if self.selected_cell == (i, j):
                        pygame.draw.rect(self.screen, ACCENT_COLOR, rect)
                    else:
                        pygame.draw.rect(self.screen, SECONDARY_COLOR, rect)
                    pygame.draw.rect(self.screen, TEXT_COLOR, rect, 2)

                    word = self.board[j][i]
                    if word:
                        self.draw_word(word, x, y)

                    if (i, j) in self.marked_cells:
                        pygame.draw.line(self.screen, (255, 0, 0), (x + 5, y + 5), (x + self.cell_size - 5, y + self.cell_size - 5), 4)
                        pygame.draw.line(self.screen, (255, 0, 0), (x + self.cell_size - 5, y + 5), (x + 5, y + self.cell_size - 5), 4)

            self.draw_interface()

            # Отрисовка анимаций
            for anim in self.animations:
                progress = anim['progress'] / anim['duration']
                current_pos = (
                    anim['start_pos'][0] + (anim['end_pos'][0] - anim['start_pos'][0]) * progress,
                    anim['start_pos'][1] + (anim['end_pos'][1] - anim['start_pos'][1]) * progress
                )
                pygame.draw.circle(self.screen, (255, 0, 0), (int(current_pos[0]), int(current_pos[1])), 5)

            pygame.display.flip()

    def draw_button(self, rect, text):
        pygame.draw.rect(self.screen, SECONDARY_COLOR, rect, border_radius=10)
        pygame.draw.rect(self.screen, ACCENT_COLOR, rect, 2, border_radius=10)
        button_text = self.font.render(text, True, TEXT_COLOR)
        button_text_rect = button_text.get_rect(center=rect.center)
        self.screen.blit(button_text, button_text_rect)

    def draw_word(self, word, x, y):
        font_size = 24
        lines = self.wrap_text(word, font_size, self.cell_size - 10)
        while font_size > 10 and (len(lines) > 3 or max(self.font_cache[font_size].size(line)[0] for line in lines) > self.cell_size - 10):
            font_size -= 1
            lines = self.wrap_text(word, font_size, self.cell_size - 10)
        font = self.font_cache[font_size]
        y_offset = y + (self.cell_size - len(lines) * font.get_linesize()) // 2
        for line in lines:
            text = font.render(line, True, TEXT_COLOR)
            text_rect = text.get_rect(center=(x + self.cell_size // 2, y_offset + font.get_linesize() // 2))
            self.screen.blit(text, text_rect)
            y_offset += font.get_linesize()

    def draw_interface(self):
        pygame.draw.rect(self.screen, SECONDARY_COLOR, self.input_rect, border_radius=10)
        pygame.draw.rect(self.screen, ACCENT_COLOR, self.input_rect, 2, border_radius=10)
        text_surface = self.font.render(self.input_text, True, TEXT_COLOR)
        self.screen.blit(text_surface, (self.input_rect.x + 5, self.input_rect.y + 5))

        pygame.draw.rect(self.screen, SECONDARY_COLOR, self.button_rect, border_radius=10)
        pygame.draw.rect(self.screen, ACCENT_COLOR, self.button_rect, 2, border_radius=10)
        button_text = self.font.render("Изменить", True, TEXT_COLOR)
        button_text_rect = button_text.get_rect(center=self.button_rect.center)
        self.screen.blit(button_text, button_text_rect)

        label_text = self.font.render("Введите слово:", True, TEXT_COLOR)
        label_rect = label_text.get_rect(bottomleft=(self.input_rect.left, self.input_rect.top - 5))
        self.screen.blit(label_text, label_rect)

        if self.message:
            message_surface = self.font.render(self.message, True, TEXT_COLOR)
            message_rect = message_surface.get_rect(center=self.message_rect.center)
            pygame.draw.rect(self.screen, SECONDARY_COLOR, self.message_rect, border_radius=10)
            self.screen.blit(message_surface, message_rect)

        subtitle_text = self.subtitle_font.render("by serezha168", True, TEXT_COLOR)
        subtitle_rect = subtitle_text.get_rect(center=(self.width // 2, self.height - 20))
        self.screen.blit(subtitle_text, subtitle_rect)

    def add_animation(self, start_pos, end_pos, duration):
        self.animations.append({
            'start_pos': start_pos,
            'end_pos': end_pos,
            'duration': duration,
            'progress': 0
        })

    def run(self):
        while self.running:
            self.handle_events()
            self.update()
            self.draw()
            self.clock.tick(60)
        pygame.quit()

if __name__ == "__main__":
    game = BingoGame()
    game.run()
